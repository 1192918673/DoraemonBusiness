package com.geeknewbee.doraemon.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WEATHER__CITY".
 */
public class Weather_CityDao extends AbstractDao<Weather_City, Long> {

    public static final String TABLENAME = "WEATHER__CITY";

    /**
     * Properties of entity Weather_City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CityId = new Property(1, String.class, "cityId", false, "CITY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property NameEn = new Property(3, String.class, "nameEn", false, "NAME_EN");
        public final static Property NamePy = new Property(4, String.class, "namePy", false, "NAME_PY");
        public final static Property Province = new Property(5, String.class, "province", false, "PROVINCE");
        public final static Property WeatherCnId = new Property(6, String.class, "weatherCnId", false, "WEATHER_CN_ID");
    }

    ;

    private DaoSession daoSession;


    public Weather_CityDao(DaoConfig config) {
        super(config);
    }

    public Weather_CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER__CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CITY_ID\" TEXT," + // 1: cityId
                "\"NAME\" TEXT," + // 2: name
                "\"NAME_EN\" TEXT," + // 3: nameEn
                "\"NAME_PY\" TEXT," + // 4: namePy
                "\"PROVINCE\" TEXT," + // 5: province
                "\"WEATHER_CN_ID\" TEXT);"); // 6: weatherCnId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER__CITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Weather_City entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(2, cityId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(4, nameEn);
        }
 
        String namePy = entity.getNamePy();
        if (namePy != null) {
            stmt.bindString(5, namePy);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(6, province);
        }
 
        String weatherCnId = entity.getWeatherCnId();
        if (weatherCnId != null) {
            stmt.bindString(7, weatherCnId);
        }
    }

    @Override
    protected void attachEntity(Weather_City entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Weather_City readEntity(Cursor cursor, int offset) {
        Weather_City entity = new Weather_City( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cityId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nameEn
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // namePy
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // province
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // weatherCnId
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Weather_City entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCityId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNameEn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNamePy(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvince(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWeatherCnId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Weather_City entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Weather_City entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
